/*
 *  Copyright (c) 2016-2023 Rafa≈Ç Michalski <royal@yeondir.com>
 *  License: LGPL
 */
"use strict";

const test = require('tap').test;
const raft = require('../..');
const { bufconv } = raft.utils;

test('should have functions', t => {
  t.type(bufconv.allocBufUIntLE, 'function');
  t.equal(bufconv.allocBufUIntLE.length, 2);
  t.type(bufconv.allocBufIntLE, 'function');
  t.equal(bufconv.allocBufIntLE.length, 2);
  t.type(bufconv.allocBufNumberLE, 'function');
  t.equal(bufconv.allocBufNumberLE.length, 2);
  t.type(bufconv.writeBufUIntLE, 'function');
  t.equal(bufconv.writeBufUIntLE.length, 4);
  t.type(bufconv.writeBufIntLE, 'function');
  t.equal(bufconv.writeBufIntLE.length, 4);
  t.type(bufconv.writeBufNumberLE, 'function');
  t.equal(bufconv.writeBufNumberLE.length, 3);
  t.type(bufconv.readBufUIntLE, 'function');
  t.equal(bufconv.readBufUIntLE.length, 3);
  t.type(bufconv.readBufIntLE, 'function');
  t.equal(bufconv.readBufIntLE.length, 3);
  t.type(bufconv.readBufNumberLE, 'function');
  t.equal(bufconv.readBufNumberLE.length, 3);
  t.end();
});

test('should have constants', t => {
  t.equal(bufconv.MAX_ALLOWED_INTEGER, 9007199254740991);
  t.equal(bufconv.MAX_ALLOWED_INTEGER, Number.MAX_SAFE_INTEGER);
  t.equal(bufconv.MIN_ALLOWED_INTEGER, -9007199254740991);
  t.equal(bufconv.MIN_ALLOWED_INTEGER, Number.MIN_SAFE_INTEGER);
  t.end();
});

test('allocBufUIntLE', t => {
  var buf;
  t.type(buf = bufconv.allocBufUIntLE(), Buffer);
  t.equal(buf.length, 0);
  t.type(buf = bufconv.allocBufUIntLE(undefined), Buffer);
  t.equal(buf.length, 0);
  t.type(buf = bufconv.allocBufUIntLE(null), Buffer);
  t.equal(buf.length, 0);
  t.type(buf = bufconv.allocBufUIntLE(0), Buffer);
  t.same(Array.from(buf), [0]);
  t.type(buf = bufconv.allocBufUIntLE(2), Buffer);
  t.same(Array.from(buf), [2]);
  t.type(buf = bufconv.allocBufUIntLE(255), Buffer);
  t.same(Array.from(buf), [255]);
  t.type(buf = bufconv.allocBufUIntLE(256), Buffer);
  t.same(Array.from(buf), [0, 1]);
  t.type(buf = bufconv.allocBufUIntLE(65535), Buffer);
  t.same(Array.from(buf), [255, 255]);
  t.type(buf = bufconv.allocBufUIntLE(65536), Buffer);
  t.same(Array.from(buf), [0, 0, 1]);
  t.type(buf = bufconv.allocBufUIntLE(0x800000000000), Buffer);
  t.same(Array.from(buf), [0,0,0,0,0,128]);
  t.type(buf = bufconv.allocBufUIntLE(0x800000000100), Buffer);
  t.same(Array.from(buf), [0,1,0,0,0,128]);
  t.type(buf = bufconv.allocBufUIntLE(0x800000000001), Buffer);
  t.same(Array.from(buf), [1,0,0,0,0,128]);
  t.type(buf = bufconv.allocBufUIntLE(0x800000010001), Buffer);
  t.same(Array.from(buf), [1,0,1,0,0,128]);
  t.type(buf = bufconv.allocBufUIntLE(0x800001000100), Buffer);
  t.same(Array.from(buf), [0,1,0,1,0,128]);
  t.type(buf = bufconv.allocBufUIntLE(bufconv.MAX_ALLOWED_INTEGER), Buffer);
  t.same(Array.from(buf), [255,255,255,255,255,255,31]);
  t.type(buf = bufconv.allocBufUIntLE(bufconv.MAX_ALLOWED_INTEGER - 1), Buffer);
  t.same(Array.from(buf), [254,255,255,255,255,255,31]);
  t.throws(() => bufconv.allocBufUIntLE(bufconv.MAX_ALLOWED_INTEGER + 1), new Error("value is above maximum allowed integer"));
  t.throws(() => bufconv.allocBufUIntLE(null, true), new TypeError("value is not an unsigned integer"));
  t.throws(() => bufconv.allocBufUIntLE(undefined, true), new TypeError("value is not an unsigned integer"));
  t.throws(() => bufconv.allocBufUIntLE('0', true), new TypeError("value is not an unsigned integer"));
  t.throws(() => bufconv.allocBufUIntLE([], true), new TypeError("value is not an unsigned integer"));
  t.throws(() => bufconv.allocBufUIntLE(NaN, true), new TypeError("value is not an unsigned integer"));
  t.throws(() => bufconv.allocBufUIntLE(Number.POSITIVE_INFINITY, true), new TypeError("value is not an unsigned integer"));
  t.throws(() => bufconv.allocBufUIntLE(-1, true), new TypeError("value is not an unsigned integer"));
  t.throws(() => bufconv.allocBufUIntLE(10.5, true), new TypeError("value is not an unsigned integer"));
  t.throws(() => bufconv.allocBufUIntLE(1/3, true), new TypeError("value is not an unsigned integer"));
  t.end();
});

test('allocBufIntLE', t => {
  var buf;
  t.type(buf = bufconv.allocBufIntLE(), Buffer);
  t.equal(buf.length, 0);
  t.type(buf = bufconv.allocBufIntLE(undefined), Buffer);
  t.equal(buf.length, 0);
  t.type(buf = bufconv.allocBufIntLE(null), Buffer);
  t.equal(buf.length, 0);
  t.type(buf = bufconv.allocBufIntLE(0, buf), Buffer);
  t.same(Array.from(buf), [0]);
  t.type(buf = bufconv.allocBufIntLE(1, buf), Buffer);
  t.same(Array.from(buf), [1]);
  t.type(buf = bufconv.allocBufIntLE(-1, buf), Buffer);
  t.same(Array.from(buf), [255]);
  t.type(buf = bufconv.allocBufIntLE(127, buf), Buffer);
  t.same(Array.from(buf), [127]);
  t.type(buf = bufconv.allocBufIntLE(-128, buf), Buffer);
  t.same(Array.from(buf), [128]);
  t.type(buf = bufconv.allocBufIntLE(128, buf), Buffer);
  t.same(Array.from(buf), [128,0]);
  t.type(buf = bufconv.allocBufIntLE(129, buf), Buffer);
  t.same(Array.from(buf), [129,0]);
  t.type(buf = bufconv.allocBufIntLE(-129, buf), Buffer);
  t.same(Array.from(buf), [127,255]);
  t.type(buf = bufconv.allocBufIntLE(-256, buf), Buffer);
  t.same(Array.from(buf), [0,255]);
  t.type(buf = bufconv.allocBufIntLE(256, buf), Buffer);
  t.same(Array.from(buf), [0,1]);
  t.type(buf = bufconv.allocBufIntLE(32767, buf), Buffer);
  t.same(Array.from(buf), [255,127]);
  t.type(buf = bufconv.allocBufIntLE(32768, buf), Buffer);
  t.same(Array.from(buf), [0,128,0]);
  t.type(buf = bufconv.allocBufIntLE(-32768, buf), Buffer);
  t.same(Array.from(buf), [0,128]);
  t.type(buf = bufconv.allocBufIntLE(-65536, buf), Buffer);
  t.same(Array.from(buf), [0,0,255]);
  t.type(buf = bufconv.allocBufIntLE(0x800000000000), Buffer);
  t.same(Array.from(buf), [0,0,0,0,0,128,0]);
  t.type(buf = bufconv.allocBufIntLE(-0x800000000000), Buffer);
  t.same(Array.from(buf), [0,0,0,0,0,128]);
  t.type(buf = bufconv.allocBufIntLE(0x800000000100), Buffer);
  t.same(Array.from(buf), [0,1,0,0,0,128,0]);
  t.type(buf = bufconv.allocBufIntLE(-0x800000000100), Buffer);
  t.same(Array.from(buf), [0,255,255,255,255,127,255]);
  t.type(buf = bufconv.allocBufIntLE(0x800000000001), Buffer);
  t.same(Array.from(buf), [1,0,0,0,0,128,0]);
  t.type(buf = bufconv.allocBufIntLE(-0x800000000001), Buffer);
  t.same(Array.from(buf), [255,255,255,255,255,127,255]);
  t.type(buf = bufconv.allocBufIntLE(0x800000010001), Buffer);
  t.same(Array.from(buf), [1,0,1,0,0,128,0]);
  t.type(buf = bufconv.allocBufIntLE(-0x800000010001), Buffer);
  t.same(Array.from(buf), [255,255,254,255,255,127,255]);
  t.type(buf = bufconv.allocBufIntLE(0x800001000100), Buffer);
  t.same(Array.from(buf), [0,1,0,1,0,128,0]);
  t.type(buf = bufconv.allocBufIntLE(-0x800001000100), Buffer);
  t.same(Array.from(buf), [0,255,255,254,255,127,255]);
  t.type(buf = bufconv.allocBufIntLE(bufconv.MAX_ALLOWED_INTEGER, buf), Buffer);
  t.same(Array.from(buf), [255,255,255,255,255,255,31]);
  t.type(buf = bufconv.allocBufIntLE(bufconv.MAX_ALLOWED_INTEGER - 1, buf), Buffer);
  t.same(Array.from(buf), [254,255,255,255,255,255,31]);
  t.throws(() => bufconv.writeBufIntLE(bufconv.MAX_ALLOWED_INTEGER + 1, buf), new Error("value is above maximum allowed integer"));
  t.type(buf = bufconv.allocBufIntLE(bufconv.MIN_ALLOWED_INTEGER, buf), Buffer);
  t.same(Array.from(buf), [1,0,0,0,0,0,224]);
  t.type(buf = bufconv.allocBufIntLE(bufconv.MIN_ALLOWED_INTEGER + 1, buf), Buffer);
  t.same(Array.from(buf), [2,0,0,0,0,0,224]);
  t.throws(() => bufconv.allocBufIntLE(bufconv.MIN_ALLOWED_INTEGER - 1, buf), new Error("value is below minimum allowed integer"));
  t.throws(() => bufconv.allocBufIntLE(null, true), new TypeError("value is not an integer"));
  t.throws(() => bufconv.allocBufIntLE(undefined, true), new TypeError("value is not an integer"));
  t.throws(() => bufconv.allocBufIntLE('0', true), new TypeError("value is not an integer"));
  t.throws(() => bufconv.allocBufIntLE([], true), new TypeError("value is not an integer"));
  t.throws(() => bufconv.allocBufIntLE(NaN, true), new TypeError("value is not an integer"));
  t.throws(() => bufconv.allocBufIntLE(Number.POSITIVE_INFINITY, true), new TypeError("value is not an integer"));
  t.throws(() => bufconv.allocBufIntLE(-10.5, true), new TypeError("value is not an integer"));
  t.throws(() => bufconv.allocBufIntLE(10.5, true), new TypeError("value is not an integer"));
  t.throws(() => bufconv.allocBufIntLE(-1/3, true), new TypeError("value is not an integer"));
  t.throws(() => bufconv.allocBufIntLE(1/3, true), new TypeError("value is not an integer"));
  t.end();
});

test('allocBufNumberLE', t => {
  var buf;
  t.type(buf = bufconv.allocBufNumberLE(), Buffer);
  t.equal(buf.length, 0);
  t.type(buf = bufconv.allocBufNumberLE(undefined), Buffer);
  t.equal(buf.length, 0);
  t.type(buf = bufconv.allocBufNumberLE(null), Buffer);
  t.equal(buf.length, 0);
  t.type(buf = bufconv.allocBufNumberLE(0), Buffer);
  t.same(Array.from(buf), [0]);
  t.type(buf = bufconv.allocBufNumberLE(10), Buffer);
  t.same(Array.from(buf), [10]);
  t.type(buf = bufconv.allocBufNumberLE(0.5), Buffer);
  t.same(Array.from(buf), [0,0,0,0,0,0,224,63]);
  t.type(buf = bufconv.allocBufNumberLE(10/3), Buffer);
  t.same(Array.from(buf), [171,170,170,170,170,170,10,64]);
  t.type(buf = bufconv.allocBufNumberLE(Math.PI), Buffer);
  t.same(Array.from(buf), [24,45,68,84,251,33,9,64]);
  t.type(buf = bufconv.allocBufNumberLE(Math.E), Buffer);
  t.same(Array.from(buf), [105,87,20,139,10,191,5,64]);
  t.type(buf = bufconv.allocBufNumberLE(bufconv.MAX_ALLOWED_INTEGER), Buffer);
  t.same(Array.from(buf), [255,255,255,255,255,255,31]);
  t.type(buf = bufconv.allocBufNumberLE(bufconv.MAX_ALLOWED_INTEGER - 1), Buffer);
  t.same(Array.from(buf), [254,255,255,255,255,255,31]);
  t.type(buf = bufconv.allocBufNumberLE(bufconv.MAX_ALLOWED_INTEGER + 1), Buffer);
  t.same(Array.from(buf), [0,0,0,0,0,0,64,67]);
  t.type(buf = bufconv.allocBufNumberLE(bufconv.MIN_ALLOWED_INTEGER), Buffer);
  t.same(Array.from(buf), [1,0,0,0,0,0,224]);
  t.type(buf = bufconv.allocBufNumberLE(bufconv.MIN_ALLOWED_INTEGER + 1), Buffer);
  t.same(Array.from(buf), [2,0,0,0,0,0,224]);
  t.type(buf = bufconv.allocBufNumberLE(bufconv.MIN_ALLOWED_INTEGER - 1), Buffer);
  t.same(Array.from(buf), [0,0,0,0,0,0,64,195]);
  t.type(buf = bufconv.allocBufNumberLE(0/0), Buffer);
  t.same(Array.from(buf), [0,0,0,0,0,0,248,buf[7]]);
  t.type(buf = bufconv.allocBufNumberLE(1/0), Buffer);
  t.same(Array.from(buf), [0,0,0,0,0,0,240,127]);
  t.type(buf = bufconv.allocBufNumberLE(-1/0), Buffer);
  t.same(Array.from(buf), [0,0,0,0,0,0,240,255]);
  t.throws(() => bufconv.allocBufNumberLE(null, true), new TypeError("value is not a number"));
  t.throws(() => bufconv.allocBufNumberLE(undefined, true), new TypeError("value is not a number"));
  t.throws(() => bufconv.allocBufNumberLE('0', true), new TypeError("value is not a number"));
  t.throws(() => bufconv.allocBufNumberLE([], true), new TypeError("value is not a number"));
  t.end();
});

test('writeBufUIntLE', t => {
  var buf = Buffer.alloc(10);
  t.equal(bufconv.writeBufUIntLE(0, buf), 1);
  t.same(Array.from(buf), [0,0,0,0,0,0,0,0,0,0]);
  t.equal(bufconv.writeBufUIntLE(1, buf), 1);
  t.same(Array.from(buf), [1,0,0,0,0,0,0,0,0,0]);
  t.equal(bufconv.writeBufUIntLE(255, buf), 1);
  t.same(Array.from(buf), [255,0,0,0,0,0,0,0,0,0]);
  t.equal(bufconv.writeBufUIntLE(256, buf), 2);
  t.same(Array.from(buf), [0,1,0,0,0,0,0,0,0,0]);
  t.equal(bufconv.writeBufUIntLE(65535, buf), 2);
  t.same(Array.from(buf), [255,255,0,0,0,0,0,0,0,0]);
  t.equal(bufconv.writeBufUIntLE(65536, buf), 3);
  t.same(Array.from(buf), [0,0,1,0,0,0,0,0,0,0]);
  t.equal(bufconv.writeBufUIntLE(0x800000000000, buf), 6);
  t.same(Array.from(buf), [0,0,0,0,0,128,0,0,0,0]);
  t.equal(bufconv.writeBufUIntLE(0x800000000100, buf), 6);
  t.same(Array.from(buf), [0,1,0,0,0,128,0,0,0,0]);
  t.equal(bufconv.writeBufUIntLE(0x800000000001, buf), 6);
  t.same(Array.from(buf), [1,0,0,0,0,128,0,0,0,0]);
  t.equal(bufconv.writeBufUIntLE(0x800000010001, buf), 6);
  t.same(Array.from(buf), [1,0,1,0,0,128,0,0,0,0]);
  t.equal(bufconv.writeBufUIntLE(0x800001000100, buf), 6);
  t.same(Array.from(buf), [0,1,0,1,0,128,0,0,0,0]);
  t.equal(bufconv.writeBufUIntLE(bufconv.MAX_ALLOWED_INTEGER, buf), 7);
  t.same(Array.from(buf), [255,255,255,255,255,255,31,0,0,0]);
  t.equal(bufconv.writeBufUIntLE(bufconv.MAX_ALLOWED_INTEGER - 1, buf), 7);
  t.same(Array.from(buf), [254,255,255,255,255,255,31,0,0,0]);
  t.throws(() => bufconv.writeBufUIntLE(bufconv.MAX_ALLOWED_INTEGER + 1, buf), new Error("value is above maximum allowed integer"));
  buf.fill(0);
  t.equal(bufconv.writeBufUIntLE(1, buf, 9), 10);
  t.same(Array.from(buf), [0,0,0,0,0,0,0,0,0,1]);
  buf.fill(0);
  t.equal(bufconv.writeBufUIntLE(1, buf, 10), 10);
  t.same(Array.from(buf), [0,0,0,0,0,0,0,0,0,0]);
  buf.fill(0);
  t.equal(bufconv.writeBufUIntLE(65535, buf, 8), 10);
  t.same(Array.from(buf), [0,0,0,0,0,0,0,0,255,255]);
  buf.fill(0);
  t.equal(bufconv.writeBufUIntLE(16777215, buf, 7), 10);
  t.same(Array.from(buf), [0,0,0,0,0,0,0,255,255,255]);
  buf.fill(0);
  t.equal(bufconv.writeBufUIntLE(16777215, buf, 9), 10);
  t.same(Array.from(buf), [0,0,0,0,0,0,0,0,0,255]);
  buf.fill(0);
  t.equal(bufconv.writeBufUIntLE(bufconv.MAX_ALLOWED_INTEGER, buf, 3), 10);
  t.same(Array.from(buf), [0,0,0,255,255,255,255,255,255,31]);
  buf.fill(0);
  t.equal(bufconv.writeBufUIntLE(bufconv.MAX_ALLOWED_INTEGER, buf, 4), 10);
  t.same(Array.from(buf), [0,0,0,0,255,255,255,255,255,255]);
  buf.fill(255);
  t.same(Array.from(buf), [255,255,255,255,255,255,255,255,255,255]);
  t.equal(bufconv.writeBufUIntLE(0, buf, 1, 2), 2);
  t.same(Array.from(buf), [255,0,255,255,255,255,255,255,255,255]);
  t.equal(bufconv.writeBufUIntLE(0, buf, 3, 2), 3);
  t.same(Array.from(buf), [255,0,255,255,255,255,255,255,255,255]);
  t.equal(bufconv.writeBufUIntLE(1, buf, 3, 5), 5);
  t.same(Array.from(buf), [255,0,255,1,0,255,255,255,255,255]);
  t.equal(bufconv.writeBufUIntLE(65534, buf, 0, 7), 7);
  t.same(Array.from(buf), [254,255,0,0,0,0,0,255,255,255]);
  t.equal(bufconv.writeBufUIntLE(bufconv.MAX_ALLOWED_INTEGER, buf, 1, 11), 10);
  t.same(Array.from(buf), [254,255,255,255,255,255,255,31,0,0]);
  t.end();
});

test('writeBufIntLE', t => {
  var buf = Buffer.alloc(10);
  t.equal(bufconv.writeBufIntLE(0, buf), 1);
  t.same(Array.from(buf), [0,0,0,0,0,0,0,0,0,0]);
  t.equal(bufconv.writeBufIntLE(1, buf), 1);
  t.same(Array.from(buf), [1,0,0,0,0,0,0,0,0,0]);
  t.equal(bufconv.writeBufIntLE(-1, buf), 1);
  t.same(Array.from(buf), [255,0,0,0,0,0,0,0,0,0]);
  t.equal(bufconv.writeBufIntLE(127, buf), 1);
  t.same(Array.from(buf), [127,0,0,0,0,0,0,0,0,0]);
  t.equal(bufconv.writeBufIntLE(-128, buf), 1);
  t.same(Array.from(buf), [128,0,0,0,0,0,0,0,0,0]);
  t.equal(bufconv.writeBufIntLE(128, buf), 2);
  t.same(Array.from(buf), [128,0,0,0,0,0,0,0,0,0]);
  t.equal(bufconv.writeBufIntLE(129, buf), 2);
  t.same(Array.from(buf), [129,0,0,0,0,0,0,0,0,0]);
  t.equal(bufconv.writeBufIntLE(-129, buf), 2);
  t.same(Array.from(buf), [127,255,0,0,0,0,0,0,0,0]);
  t.equal(bufconv.writeBufIntLE(-256, buf), 2);
  t.same(Array.from(buf), [0,255,0,0,0,0,0,0,0,0]);
  t.equal(bufconv.writeBufIntLE(256, buf), 2);
  t.same(Array.from(buf), [0,1,0,0,0,0,0,0,0,0]);
  t.equal(bufconv.writeBufIntLE(32767, buf), 2);
  t.same(Array.from(buf), [255,127,0,0,0,0,0,0,0,0]);
  t.equal(bufconv.writeBufIntLE(32768, buf), 3);
  t.same(Array.from(buf), [0,128,0,0,0,0,0,0,0,0]);
  t.equal(bufconv.writeBufIntLE(-32768, buf), 2);
  t.same(Array.from(buf), [0,128,0,0,0,0,0,0,0,0]);
  t.equal(bufconv.writeBufIntLE(-65536, buf), 3);
  t.same(Array.from(buf), [0,0,255,0,0,0,0,0,0,0]);
  t.equal(bufconv.writeBufIntLE(bufconv.MAX_ALLOWED_INTEGER, buf), 7);
  t.same(Array.from(buf), [255,255,255,255,255,255,31,0,0,0]);
  t.equal(bufconv.writeBufIntLE(bufconv.MAX_ALLOWED_INTEGER - 1, buf), 7);
  t.same(Array.from(buf), [254,255,255,255,255,255,31,0,0,0]);
  t.throws(() => bufconv.writeBufIntLE(bufconv.MAX_ALLOWED_INTEGER + 1, buf), new Error("value is above maximum allowed integer"));
  t.equal(bufconv.writeBufIntLE(bufconv.MIN_ALLOWED_INTEGER, buf), 7);
  t.same(Array.from(buf), [1,0,0,0,0,0,224,0,0,0]);
  t.equal(bufconv.writeBufIntLE(bufconv.MIN_ALLOWED_INTEGER + 1, buf), 7);
  t.same(Array.from(buf), [2,0,0,0,0,0,224,0,0,0]);
  t.throws(() => bufconv.writeBufIntLE(bufconv.MIN_ALLOWED_INTEGER - 1, buf), new Error("value is below minimum allowed integer"));
  buf.fill(0);
  t.equal(bufconv.writeBufIntLE(1, buf, 9), 10);
  t.same(Array.from(buf), [0,0,0,0,0,0,0,0,0,1]);
  buf.fill(0);
  t.equal(bufconv.writeBufIntLE(1, buf, 10), 10);
  t.same(Array.from(buf), [0,0,0,0,0,0,0,0,0,0]);
  buf.fill(0);
  t.equal(bufconv.writeBufIntLE(65535, buf, 8), 10);
  t.same(Array.from(buf), [0,0,0,0,0,0,0,0,255,255]);
  buf.fill(0);
  t.equal(bufconv.writeBufIntLE(16777215, buf, 7), 10);
  t.same(Array.from(buf), [0,0,0,0,0,0,0,255,255,255]);
  buf.fill(0);
  t.equal(bufconv.writeBufIntLE(16777215, buf, 9), 10);
  t.same(Array.from(buf), [0,0,0,0,0,0,0,0,0,255]);
  buf.fill(0);
  t.equal(bufconv.writeBufIntLE(bufconv.MAX_ALLOWED_INTEGER, buf, 3), 10);
  t.same(Array.from(buf), [0,0,0,255,255,255,255,255,255,31]);
  buf.fill(0);
  t.equal(bufconv.writeBufIntLE(bufconv.MAX_ALLOWED_INTEGER, buf, 4), 10);
  t.same(Array.from(buf), [0,0,0,0,255,255,255,255,255,255]);
  buf.fill(0);
  t.equal(bufconv.writeBufIntLE(bufconv.MIN_ALLOWED_INTEGER, buf, 3), 10);
  t.same(Array.from(buf), [0,0,0,1,0,0,0,0,0,224]);
  buf.fill(0);
  t.equal(bufconv.writeBufIntLE(bufconv.MIN_ALLOWED_INTEGER, buf, 4), 10);
  t.same(Array.from(buf), [0,0,0,0,1,0,0,0,0,0]);
  buf.fill(255);
  t.same(Array.from(buf), [255,255,255,255,255,255,255,255,255,255]);
  t.equal(bufconv.writeBufIntLE(0, buf, 1, 2), 2);
  t.same(Array.from(buf), [255,0,255,255,255,255,255,255,255,255]);
  t.equal(bufconv.writeBufIntLE(0, buf, 3, 2), 3);
  t.same(Array.from(buf), [255,0,255,255,255,255,255,255,255,255]);
  t.equal(bufconv.writeBufIntLE(1, buf, 3, 5), 5);
  t.same(Array.from(buf), [255,0,255,1,0,255,255,255,255,255]);
  t.equal(bufconv.writeBufIntLE(65534, buf, 0, 7), 7);
  t.same(Array.from(buf), [254,255,0,0,0,0,0,255,255,255]);
  t.equal(bufconv.writeBufIntLE(bufconv.MIN_ALLOWED_INTEGER, buf, 1, 11), 10);
  t.same(Array.from(buf), [254,1,0,0,0,0,0,224,0,0]);
  buf.fill(128);
  t.same(Array.from(buf), [128,128,128,128,128,128,128,128,128,128]);
  t.equal(bufconv.writeBufIntLE(bufconv.MAX_ALLOWED_INTEGER, buf, 1, 11), 10);
  t.same(Array.from(buf), [128,255,255,255,255,255,255,31,0,0]);
  t.end();
});

test('writeBufNumberLE', t => {
  var buf = Buffer.alloc(10);
  t.equal(bufconv.writeBufNumberLE(0, buf), 1);
  t.same(Array.from(buf), [0,0,0,0,0,0,0,0,0,0]);
  t.equal(bufconv.writeBufNumberLE(10, buf), 1);
  t.same(Array.from(buf), [10,0,0,0,0,0,0,0,0,0]);
  t.equal(bufconv.writeBufNumberLE(0.5, buf), 8);
  t.same(Array.from(buf), [0,0,0,0,0,0,224,63,0,0]);
  t.equal(bufconv.writeBufNumberLE(10/3, buf), 8);
  t.same(Array.from(buf), [171,170,170,170,170,170,10,64,0,0]);
  t.equal(bufconv.writeBufNumberLE(Math.PI, buf), 8);
  t.same(Array.from(buf), [24,45,68,84,251,33,9,64,0,0]);
  t.equal(bufconv.writeBufNumberLE(Math.E, buf), 8);
  t.same(Array.from(buf), [105,87,20,139,10,191,5,64,0,0]);
  buf.fill(0);
  t.equal(bufconv.writeBufNumberLE(bufconv.MAX_ALLOWED_INTEGER, buf), 7);
  t.same(Array.from(buf), [255,255,255,255,255,255,31,0,0,0]);
  t.equal(bufconv.writeBufNumberLE(bufconv.MAX_ALLOWED_INTEGER - 1, buf), 7);
  t.same(Array.from(buf), [254,255,255,255,255,255,31,0,0,0]);
  t.equal(bufconv.writeBufNumberLE(bufconv.MAX_ALLOWED_INTEGER + 1, buf), 8);
  t.same(Array.from(buf), [0,0,0,0,0,0,64,67,0,0]);
  buf.fill(0);
  t.equal(bufconv.writeBufNumberLE(bufconv.MIN_ALLOWED_INTEGER, buf), 7);
  t.same(Array.from(buf), [1,0,0,0,0,0,224,0,0,0]);
  t.equal(bufconv.writeBufNumberLE(bufconv.MIN_ALLOWED_INTEGER + 1, buf), 7);
  t.same(Array.from(buf), [2,0,0,0,0,0,224,0,0,0]);
  t.equal(bufconv.writeBufNumberLE(bufconv.MIN_ALLOWED_INTEGER - 1, buf), 8);
  t.same(Array.from(buf), [0,0,0,0,0,0,64,195,0,0]);
  t.equal(bufconv.writeBufNumberLE(0/0, buf), 8);
  t.same(Array.from(buf), [0,0,0,0,0,0,248,buf[7],0,0]);
  t.equal(bufconv.writeBufNumberLE(1/0, buf), 8);
  t.same(Array.from(buf), [0,0,0,0,0,0,240,127,0,0]);
  t.equal(bufconv.writeBufNumberLE(-1/0, buf), 8);
  t.same(Array.from(buf), [0,0,0,0,0,0,240,255,0,0]);
  t.end();
});

test('readBufUIntLE', t => {
  var buf = Buffer.alloc(7);
  t.equal(bufconv.readBufUIntLE(buf), 0);
  t.equal(bufconv.readBufUIntLE(buf,0,0), null);
  t.equal(bufconv.readBufUIntLE(Buffer.alloc(10)), 0);
  t.equal(bufconv.readBufUIntLE(buf, 1), 0);
  t.equal(bufconv.readBufUIntLE(buf, 6), 0);
  t.equal(bufconv.readBufUIntLE(buf, 7), null);
  t.equal(bufconv.readBufUIntLE(buf, -1), null);
  t.equal(bufconv.readBufUIntLE(buf, -2), null);
  buf = Buffer.from([0,0,0,0,0,0,0,1]);
  t.throws(() => bufconv.readBufUIntLE(buf), new Error("integer read from a buffer is above maximum allowed"));
  t.equal(bufconv.readBufUIntLE(Buffer.alloc(0)), null);
  t.equal(bufconv.readBufUIntLE(Buffer.from([42])), 42);
  t.equal(bufconv.readBufUIntLE(Buffer.from([42]), 1), null);
  t.equal(bufconv.readBufUIntLE(Buffer.from([0, 0, 0, 0, 0, 0, 42]), 6), 42);
  t.equal(bufconv.readBufUIntLE(Buffer.from([0, 0, 0, 0, 0, 41, 42]), 5), 41 + 42*256);
  t.equal(bufconv.readBufUIntLE(Buffer.from([0, 0, 0, 0, 40, 41, 42]), 4), 40 + 41*256 + 42*65536);
  t.equal(bufconv.readBufUIntLE(Buffer.from([255,255,255,255,255,255,31,0,0,0])), bufconv.MAX_ALLOWED_INTEGER);
  t.equal(bufconv.readBufUIntLE(Buffer.from([255,255,255,255,255,255,31])), bufconv.MAX_ALLOWED_INTEGER);
  t.equal(bufconv.readBufUIntLE(Buffer.from([254,255,255,255,255,255,31,0,0,0])), bufconv.MAX_ALLOWED_INTEGER - 1);
  t.equal(bufconv.readBufUIntLE(Buffer.from([255,1,2,3,4,5,6]), 1), 1 + 2*256 + 3*65536 + 4*16777216 + 5*4294967296 + 6*1099511627776);
  t.equal(bufconv.readBufUIntLE(Buffer.from([0,0,0,0,0,128])), 0x800000000000);
  t.end();
});

test('readBufIntLE', t => {
  var buf = Buffer.alloc(7);
  t.equal(bufconv.readBufIntLE(buf), 0);
  t.equal(bufconv.readBufIntLE(buf,0,0), null);
  t.equal(bufconv.readBufIntLE(Buffer.alloc(10)), 0);
  t.equal(bufconv.readBufIntLE(buf, 1), 0);
  t.equal(bufconv.readBufIntLE(buf, 6), 0);
  t.equal(bufconv.readBufIntLE(buf, 7), null);
  t.equal(bufconv.readBufIntLE(buf, -1), null);
  t.equal(bufconv.readBufIntLE(buf, -2), null);
  buf = Buffer.from([0,0,0,0,0,0,0,1]);
  t.throws(() => bufconv.readBufIntLE(buf), new Error("integer read from a buffer is above maximum allowed"));
  buf = Buffer.from([0,0,0,0,0,0,0,0x80]);
  t.throws(() => bufconv.readBufIntLE(buf), new Error("integer read from a buffer is below minimum allowed"));
  t.equal(bufconv.readBufIntLE(Buffer.alloc(0)), null);
  t.equal(bufconv.readBufIntLE(Buffer.from([42])), 42);
  t.equal(bufconv.readBufIntLE(Buffer.from([42]), 1), null);
  t.equal(bufconv.readBufIntLE(Buffer.from([0, 0, 0, 0, 0, 0, 42]), 6), 42);
  t.equal(bufconv.readBufIntLE(Buffer.from([0, 0, 0, 0, 0, 41, 42]), 5), 41 + 42*256);
  t.equal(bufconv.readBufIntLE(Buffer.from([0, 0, 0, 0, 40, 41, 42]), 4), 40 + 41*256 + 42*65536);
  t.equal(bufconv.readBufIntLE(Buffer.from([255,255,255,255,255,255,31,0,0,0])), bufconv.MAX_ALLOWED_INTEGER);
  t.equal(bufconv.readBufIntLE(Buffer.from([255,255,255,255,255,255,31])), bufconv.MAX_ALLOWED_INTEGER);
  t.equal(bufconv.readBufIntLE(Buffer.from([254,255,255,255,255,255,31,0,0,0])), bufconv.MAX_ALLOWED_INTEGER - 1);
  t.throws(() => bufconv.readBufIntLE(Buffer.from([1,0,0,0,0,0,224,0,0,0])),
    new Error("integer read from a buffer is above maximum allowed"));
  t.equal(bufconv.readBufIntLE(Buffer.from([1,0,0,0,0,0,224,0,0,0]),0,7), bufconv.MIN_ALLOWED_INTEGER);
  t.equal(bufconv.readBufIntLE(Buffer.from([1,0,0,0,0,0,224])), bufconv.MIN_ALLOWED_INTEGER);
  t.equal(bufconv.readBufIntLE(Buffer.from([2,0,0,0,0,0,224,0,0,0]),0,7), bufconv.MIN_ALLOWED_INTEGER + 1);
  t.equal(bufconv.readBufIntLE(Buffer.from([255,1,2,3,4,5,6]), 1), 1 + 2*256 + 3*65536 + 4*16777216 + 5*4294967296 + 6*1099511627776);
  t.equal(bufconv.readBufIntLE(Buffer.from([0,0,0,0,0,128])), -0x800000000000);
  t.equal(bufconv.readBufIntLE(Buffer.from([0,0,0,0,0,128,0])), 0x800000000000);
  t.end();
});

test('readBufNumberLE', t => {
  var buf = Buffer.alloc(8);
  t.equal(bufconv.readBufNumberLE(buf), 0);
  t.equal(bufconv.readBufNumberLE(buf, 0, 1), 0);
  t.equal(bufconv.readBufNumberLE(buf, 1, 1), null);
  t.equal(bufconv.readBufNumberLE(buf, 1, 2), 0);
  t.equal(bufconv.readBufNumberLE(buf, 0, 7), 0);
  t.equal(bufconv.readBufNumberLE(buf, 0, 8), 0);
  t.equal(bufconv.readBufNumberLE(buf, 0, 0), null);
  t.throws(() => bufconv.readBufNumberLE(Buffer.alloc(9)), new Error("byte length of a stored number is above 8 bytes"));
  t.equal(bufconv.readBufNumberLE(buf, 1), 0);
  t.equal(bufconv.readBufNumberLE(buf, 7), 0);
  t.equal(bufconv.readBufNumberLE(buf, 8), null);
  t.equal(bufconv.readBufNumberLE(buf, -1), null);
  t.equal(bufconv.readBufNumberLE(buf, -2), null);
  t.equal(bufconv.readBufNumberLE(Buffer.from([0,0,0,0,0,0,224,63])), 0.5);
  t.equal(bufconv.readBufNumberLE(Buffer.from([171,170,170,170,170,170,10,64])), 3.3333333333333335);
  t.equal(bufconv.readBufNumberLE(Buffer.from([24,45,68,84,251,33,9,64])), Math.PI);
  t.equal(bufconv.readBufNumberLE(Buffer.from([105,87,20,139,10,191,5,64])), Math.E);
  t.equal(bufconv.readBufNumberLE(Buffer.alloc(0)), null);
  t.equal(bufconv.readBufNumberLE(Buffer.from([42])), 42);
  t.equal(bufconv.readBufNumberLE(Buffer.from([42]), 1), null);
  t.equal(bufconv.readBufNumberLE(Buffer.from([0, 0, 0, 0, 0, 0, 42]), 6), 42);
  t.equal(bufconv.readBufNumberLE(Buffer.from([0, 0, 0, 0, 0, 41, 42]), 5), 41 + 42*256);
  t.equal(bufconv.readBufNumberLE(Buffer.from([0, 0, 0, 0, 40, 41, 42]), 4), 40 + 41*256 + 42*65536);
  t.equal(bufconv.readBufNumberLE(Buffer.from([255,255,255,255,255,255,31,0,0,0]), 0, 7), bufconv.MAX_ALLOWED_INTEGER);
  t.equal(bufconv.readBufNumberLE(Buffer.from([255,255,255,255,255,255,31])), bufconv.MAX_ALLOWED_INTEGER);
  t.equal(bufconv.readBufNumberLE(Buffer.from([254,255,255,255,255,255,31,0,0,0]), 0, 7), bufconv.MAX_ALLOWED_INTEGER - 1);
  t.equal(bufconv.readBufNumberLE(Buffer.from([1,0,0,0,0,0,224,0,0,0]), 0, 7), bufconv.MIN_ALLOWED_INTEGER);
  t.equal(bufconv.readBufNumberLE(Buffer.from([1,0,0,0,0,0,224])), bufconv.MIN_ALLOWED_INTEGER);
  t.equal(bufconv.readBufNumberLE(Buffer.from([2,0,0,0,0,0,224,0,0,0]), 0, 7), bufconv.MIN_ALLOWED_INTEGER + 1);
  t.equal(bufconv.readBufNumberLE(Buffer.from([255,1,2,3,4,5,6]), 1), 1 + 2*256 + 3*65536 + 4*16777216 + 5*4294967296 + 6*1099511627776);
  t.equal(bufconv.readBufNumberLE(Buffer.from([0,0,0,0,0,128])), -0x800000000000);
  t.equal(bufconv.readBufNumberLE(Buffer.from([0,0,0,0,0,128,0])), 0x800000000000);
  t.equal(bufconv.readBufNumberLE(Buffer.from([0,0,0,0,0,0,64,67])), bufconv.MAX_ALLOWED_INTEGER + 1);
  t.equal(bufconv.readBufNumberLE(Buffer.from([0,0,0,0,0,0,64,195])), bufconv.MIN_ALLOWED_INTEGER - 1);
  t.end();
});

test('precision', t => {
  var offset, buf = Buffer.alloc(7);
  for(var i = 1; i <= 255; ++i) {
    var value = i, value1;
    do {
      offset = bufconv.writeBufUIntLE(value, buf, 0);
      t.equal(offset, Math.ceil(Math.log2(value + 1)/8));
      t.equal(bufconv.readBufUIntLE(buf, 0, offset), value);
      offset = bufconv.writeBufIntLE(value, buf, 0);
      t.equal(offset, Math.ceil(Math.log2(value*2 + 1)/8));
      t.equal(bufconv.readBufIntLE(buf, 0, offset), value);
      value1 = value - 1;
      offset = bufconv.writeBufUIntLE(value1, buf, 0);
      t.equal(offset, Math.ceil(Math.log2(value1 + 1)/8) || 1);
      t.equal(bufconv.readBufUIntLE(buf, 0, offset), value1);
      offset = bufconv.writeBufIntLE(value1, buf, 0);
      t.equal(offset, Math.ceil(Math.log2(value1*2 + 1)/8) || 1);
      t.equal(bufconv.readBufIntLE(buf, 0, offset), value1);
      value1 = value + 1;
      offset = bufconv.writeBufUIntLE(value1, buf, 0);
      t.equal(offset, Math.ceil(Math.log2(value1 + 1)/8));
      t.equal(bufconv.readBufUIntLE(buf, 0, offset), value1);
      offset = bufconv.writeBufIntLE(value1, buf, 0);
      t.equal(offset, Math.ceil(Math.log2(value1*2 + 1)/8));
      t.equal(bufconv.readBufIntLE(buf, 0, offset), value1);
      value *= 2;
    } while (value <= bufconv.MAX_ALLOWED_INTEGER);
  }
  for(var i = -1; i >= -256; --i) {
    var value = i, value1;
    do {
      offset = bufconv.writeBufIntLE(value, buf, 0);
      t.equal(offset, Math.ceil(Math.log2(-value*2)/8));
      t.equal(bufconv.readBufIntLE(buf, 0, offset), value);
      value1 = value - 1;
      offset = bufconv.writeBufIntLE(value1, buf, 0);
      t.equal(offset, Math.ceil(Math.log2(-value1*2)/8));
      t.equal(bufconv.readBufIntLE(buf, 0, offset), value1);
      value1 = value + 1;
      offset = bufconv.writeBufIntLE(value1, buf, 0);
      t.equal(offset, value1 ? Math.ceil(Math.log2(-value1*2)/8) : 1);
      t.equal(bufconv.readBufIntLE(buf, 0, offset), value1);
      value *= 2;
    } while (value >= bufconv.MIN_ALLOWED_INTEGER);
  }
  value = bufconv.MAX_ALLOWED_INTEGER + 1;
  do {
    value /= 2;
    offset = bufconv.writeBufUIntLE(value, buf, 0);
    t.equal(offset, Math.ceil(Math.log2(value + 1)/8));
    t.equal(bufconv.readBufUIntLE(buf, 0, offset), value);
    offset = bufconv.writeBufIntLE(value, buf, 0);
    t.equal(offset, Math.ceil(Math.log2(value*2 + 1)/8));
    t.equal(bufconv.readBufIntLE(buf, 0, offset), value);
    value1 = value + 1;
    offset = bufconv.writeBufUIntLE(value1, buf, 0);
    t.equal(offset, Math.ceil(Math.log2(value1 + 1)/8));
    t.equal(bufconv.readBufUIntLE(buf, 0, offset), value1);
    offset = bufconv.writeBufIntLE(value1, buf, 0);
      t.equal(offset, Math.ceil(Math.log2(value1*2 + 1)/8));
    t.equal(bufconv.readBufIntLE(buf, 0, offset), value1);
    value1 = value - 1;
    offset = bufconv.writeBufUIntLE(value1, buf, 0);
    t.equal(offset, Math.ceil(Math.log2(value1 + 1)/8));
    t.equal(bufconv.readBufUIntLE(buf, 0, offset), value1);
    offset = bufconv.writeBufIntLE(value1, buf, 0);
    t.equal(offset, Math.ceil(Math.log2(value1*2 + 1)/8));
    t.equal(bufconv.readBufIntLE(buf, 0, offset), value1);
  } while (value > 2);

  value = bufconv.MIN_ALLOWED_INTEGER - 1;
  do {
    value /= 2;
    offset = bufconv.writeBufIntLE(value, buf, 0);
    t.equal(offset, Math.ceil(Math.log2(-value*2)/8));
    t.equal(bufconv.readBufIntLE(buf, 0, offset), value);
    value1 = value + 1;
    offset = bufconv.writeBufIntLE(value1, buf, 0);
      t.equal(offset, Math.ceil(Math.log2(-value1*2)/8));
    t.equal(bufconv.readBufIntLE(buf, 0, offset), value1);
    value1 = value - 1;
    offset = bufconv.writeBufIntLE(value1, buf, 0);
    t.equal(offset, Math.ceil(Math.log2(-value1*2)/8));
    t.equal(bufconv.readBufIntLE(buf, 0, offset), value1);
  } while (value < -2);

  t.end();
});

test('random', t => {
  var buf, value;
  for(var i = 1000; i-- > 0; ) {
    value = Math.round(Math.random()*bufconv.MAX_ALLOWED_INTEGER);
    buf = bufconv.allocBufUIntLE(value);
    t.equal(buf.length,  Math.ceil(Math.log2(value + 1)/8));
    t.equal(bufconv.readBufUIntLE(buf), value);
  }
  for(var i = 1000; i-- > 0; ) {
    value = Math.round(Math.random()*bufconv.MAX_ALLOWED_INTEGER + 1);
    buf = bufconv.allocBufIntLE(value);
    t.equal(buf.length,  Math.ceil(Math.log2(value*2 + 1)/8));
    t.equal(bufconv.readBufIntLE(buf), value);
    value = Math.round(Math.random()*bufconv.MIN_ALLOWED_INTEGER - 1);
    buf = bufconv.allocBufIntLE(value);
    t.equal(buf.length,  Math.ceil(Math.log2(-value*2)/8));
    t.equal(bufconv.readBufIntLE(buf), value);
  }
  for(var i = 1000; i-- > 0; ) {
    value = Math.random()*bufconv.MAX_ALLOWED_INTEGER + 1;
    buf = bufconv.allocBufNumberLE(value);
    t.equal(buf.length, value % 1 === 0 ? Math.ceil(Math.log2(value*2 + 1)/8) : 8);
    t.equal(bufconv.readBufNumberLE(buf), value);
    value = Math.random()*bufconv.MIN_ALLOWED_INTEGER - 1;
    buf = bufconv.allocBufNumberLE(value);
    t.equal(buf.length, value % 1 === 0 ? Math.ceil(Math.log2(-value*2)/8) : 8);
    t.equal(bufconv.readBufNumberLE(buf), value);
  }
  t.end();
});

test('nulls', t => {
  t.equal(bufconv.readBufUIntLE(bufconv.allocBufUIntLE(null)), null);
  t.equal(bufconv.readBufIntLE(bufconv.allocBufIntLE(null)), null);
  t.equal(bufconv.readBufNumberLE(bufconv.allocBufNumberLE(null)), null);
  t.end();
});
